{
    "docs": [
        {
            "location": "/", 
            "text": "py-opc\n\n\npy-opc is a python library for interacting with the Alphasense OPC-N2 through\nthe Serial Peripheral Interface (SPI) bus. The objective is to make it easy to run\nthe OPC-N2 from a Raspberry Pi. The library is designed to run on a Raspberry Pi 2, with Python 3.x.\n\n\nVersions are incremented according to \nsemver\n\n\nCurrent OPC firmware versions that are supported include:\n\n\n\n\nv14\n\n\nv15\n\n\nv17\n\n\n\n\nOther firmware versions may work, but have not yet been tested. If you would like to test the library on a different firmware version and report back, it would be greatly appreciated.\n\n\nRequirements\n\n\n\n\npy-spidev\n\n\n\n\nInstallation\n\n\nGit\n\n\n git clone https://github.com/dhhagan/py-opc.git\n\n sudo python3 setup.py install\n\n\n\nZip\n\n\n wget https://github.com/dhhagan/py-opc/archive/master.zip\n\n unzip master.zip\n\n cd py-opc/\n\n sudo python3 setup.py install\n\n\n\nTesting your installation\n\n\nTesting is completed using the unittesting python module. Once the Raspberry Pi is connected to the OPC and the opc library is installed, you can run unittests as follows:\n\n\n python3 -m unittest discover tests/\n\n\n\nUsing the Module\n\n\nCheck out the \nquickstart manual\n for an easy to use example!\n\n\nSetting up the Raspberry Pi\n\n\nIf you are not familiar with setting up a Raspberry Pi to be used with a SPI device, a couple of great tutorials can be found \nhere\n, \nhere\n, and \nhere\n. A few important things to note:\n\n\n\n\nThe Alphasense OPC-N2 is a 3v3 logic SPI mode 1 device\n\n\nThe OPC requires up to 250 mA, so powering through the Raspberry Pi is not an option\n\n\n\n\nTo connect the Raspberry Pi to the OPC-N2, there are a total of four connections that need to be made, plus ground and power. The power source must be 5V, and should power both the Raspberry Pi and the OPC. The connections that need to be made are layed out below.\n\n\n\n\n\n\n\n\nPin\n\n\nFunction\n\n\nOPC-N2\n\n\nRaspberry Pi\n\n\n\n\n\n\n\n\n\n\n1\n\n\nGround\n\n\nGND\n\n\n-\n\n\n\n\n\n\n2\n\n\nChip Select\n\n\n/SS\n\n\nCE0 or CE1\n\n\n\n\n\n\n3\n\n\nMaster Out Slave In\n\n\nSDI\n\n\nMOSI\n\n\n\n\n\n\n4\n\n\nClock\n\n\nSCK\n\n\nCLK\n\n\n\n\n\n\n5\n\n\nMaster In Slave Out\n\n\nSDO\n\n\nMISO\n\n\n\n\n\n\n6\n\n\nPower\n\n\nVcc\n\n\n-\n\n\n\n\n\n\n\n\nSome day there may even be some nice looking diagrams, but I don't have an Illustrator license as of now (booo Adobe!).\n\n\nHandling Exceptions\n\n\nIf the SPI connection you feed to the \nOPCN2\n class is not an instance of the \nspidev.SpiDev\n class, the \npy-opc\n\nlibrary will throw an \nSPIError\n. Likewise, if the firmware cannot be determined when initiating the \nOPCN2\n class, a \nFirmwareError\n will be raised. Both exceptions can be handled gracefully as follows:\n\n\nimport opc\nimport spidev\n\nspi = spidev.SpiDev()\nspi.open(0, 0)\nspi.mode = 1\n\ntry:\n  alpha = OPCN2(spi)\nexcept Exception as e:\n  print (\"OPC Exception: {0}\".format(e))\n\n\n\nGetting Help\n\n\nStill running into problems?\n\n\n\n\nTo report a problem with this documentation, \ncontact the author\n.\n\n\nReport an issue\n with the py-opc library on Github\n\n\nSubmit a feature request\n for py-opc on Github", 
            "title": "py-opc"
        }, 
        {
            "location": "/#py-opc", 
            "text": "py-opc is a python library for interacting with the Alphasense OPC-N2 through\nthe Serial Peripheral Interface (SPI) bus. The objective is to make it easy to run\nthe OPC-N2 from a Raspberry Pi. The library is designed to run on a Raspberry Pi 2, with Python 3.x.  Versions are incremented according to  semver  Current OPC firmware versions that are supported include:   v14  v15  v17   Other firmware versions may work, but have not yet been tested. If you would like to test the library on a different firmware version and report back, it would be greatly appreciated.", 
            "title": "py-opc"
        }, 
        {
            "location": "/#requirements", 
            "text": "py-spidev", 
            "title": "Requirements"
        }, 
        {
            "location": "/#installation", 
            "text": "Git   git clone https://github.com/dhhagan/py-opc.git  sudo python3 setup.py install  Zip   wget https://github.com/dhhagan/py-opc/archive/master.zip  unzip master.zip  cd py-opc/  sudo python3 setup.py install  Testing your installation  Testing is completed using the unittesting python module. Once the Raspberry Pi is connected to the OPC and the opc library is installed, you can run unittests as follows:   python3 -m unittest discover tests/", 
            "title": "Installation"
        }, 
        {
            "location": "/#using-the-module", 
            "text": "Check out the  quickstart manual  for an easy to use example!  Setting up the Raspberry Pi  If you are not familiar with setting up a Raspberry Pi to be used with a SPI device, a couple of great tutorials can be found  here ,  here , and  here . A few important things to note:   The Alphasense OPC-N2 is a 3v3 logic SPI mode 1 device  The OPC requires up to 250 mA, so powering through the Raspberry Pi is not an option   To connect the Raspberry Pi to the OPC-N2, there are a total of four connections that need to be made, plus ground and power. The power source must be 5V, and should power both the Raspberry Pi and the OPC. The connections that need to be made are layed out below.     Pin  Function  OPC-N2  Raspberry Pi      1  Ground  GND  -    2  Chip Select  /SS  CE0 or CE1    3  Master Out Slave In  SDI  MOSI    4  Clock  SCK  CLK    5  Master In Slave Out  SDO  MISO    6  Power  Vcc  -     Some day there may even be some nice looking diagrams, but I don't have an Illustrator license as of now (booo Adobe!).", 
            "title": "Using the Module"
        }, 
        {
            "location": "/#handling-exceptions", 
            "text": "If the SPI connection you feed to the  OPCN2  class is not an instance of the  spidev.SpiDev  class, the  py-opc \nlibrary will throw an  SPIError . Likewise, if the firmware cannot be determined when initiating the  OPCN2  class, a  FirmwareError  will be raised. Both exceptions can be handled gracefully as follows:  import opc\nimport spidev\n\nspi = spidev.SpiDev()\nspi.open(0, 0)\nspi.mode = 1\n\ntry:\n  alpha = OPCN2(spi)\nexcept Exception as e:\n  print (\"OPC Exception: {0}\".format(e))", 
            "title": "Handling Exceptions"
        }, 
        {
            "location": "/#getting-help", 
            "text": "Still running into problems?   To report a problem with this documentation,  contact the author .  Report an issue  with the py-opc library on Github  Submit a feature request  for py-opc on Github", 
            "title": "Getting Help"
        }, 
        {
            "location": "/examples/", 
            "text": "Examples\n\n\nQuickstart\n\n\nSetting up the SPI connection\n\n\nimport spidev\nfrom opc import OPCN2\n\n# Open a spidev connection on CE0\nspi = spidev.SpiDev()\nspi.open(0, 0)\n\n# Set the SPI mode and clock speed\nspi.mode = 1\nspi.max_speed_hz = 500000\n\n\n\nInitiating the OPCN2 class\n\n\ntry:\n  alpha = OPCN2(spi)\nexcept Exception as e:\n  print (\"Startup Error: {0}\".format(e))\n\n# Check connection\nprint (\"Connection OK? {0}\".format(alpha.ping()))\n\n\n\nUsing the OPC-N2 to read a single histogram\n\n\n# Turn on the OPC\nalpha.on()\n\n# Read the histogram and print out\nhistogram = alpha.read_histogram()\n\nfor key, value in histogram.items():\n    print (\"Key: {0}\\t Value: {1}\".format(key, value))\n\n# Shutdown the OPC\nalpha.off()", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#quickstart", 
            "text": "Setting up the SPI connection  import spidev\nfrom opc import OPCN2\n\n# Open a spidev connection on CE0\nspi = spidev.SpiDev()\nspi.open(0, 0)\n\n# Set the SPI mode and clock speed\nspi.mode = 1\nspi.max_speed_hz = 500000  Initiating the OPCN2 class  try:\n  alpha = OPCN2(spi)\nexcept Exception as e:\n  print (\"Startup Error: {0}\".format(e))\n\n# Check connection\nprint (\"Connection OK? {0}\".format(alpha.ping()))  Using the OPC-N2 to read a single histogram  # Turn on the OPC\nalpha.on()\n\n# Read the histogram and print out\nhistogram = alpha.read_histogram()\n\nfor key, value in histogram.items():\n    print (\"Key: {0}\\t Value: {1}\".format(key, value))\n\n# Shutdown the OPC\nalpha.off()", 
            "title": "Quickstart"
        }, 
        {
            "location": "/api/", 
            "text": "OPCN2\n\n\nclass\n \nopc.OPCN2(spi_connection, debug = False)\n\n\nThe \nOPCN2\n class takes the \nspidev.SpiDev\n instance as a required argument, with the option to also set \ndebug\n mode. If there is an issue with the spidev connection, an \nopc.SPIError\n  will be raised. If the firmware cannot be determined, an \nopc.FirmwareError\n will be raised.\n\n\nAttributes\n\n\n\n  \ncnxn\n\n  \n\n    cnxn is an instance of \nspidev.SpiDev\n.\n  \n\n\n\n\n\n\n  \ndebug\n\n  \n\n    debug is a \nboolean\n.\n  \n\n  \n\n    if True, some useful information is printed out!\n  \n\n\n\n\n\n\n  \nfirmware\n\n  \n\n    firmware is an \ninteger\n.\n  \n\n  \n\n    Firmware version of the Alphasense OPC-N2.\n  \n\n\n\n\n\n\n  \non()\n\n  \n\n    Returns \nTrue\n if the fan and laser are successfully turned ON.\n  \n\n\n\n\n\n\n  \noff()\n\n  \n\n  Returns \nTrue\n if the fan and laser are successfully turned OFF.\n  \n\n\n\n\n\n\n  \nping()\n\n  \n\n    Returns \nTrue\n if the \ncheck_status\n command is executed correctly.\n  \n\n\n\n\n\n\n  \nread_info_string()\n\n  \n\n    Returns a \nstring\n containing the OPC Firmware version. This method also sets the firmware version attribute; if the firmware version is not supported, a \nFirmwareError\n is raised.\n  \n\n\n\n\n\n\n  \nread_config_variables()\n\n  \n\n    Returns a dictionary containing all configuration variables as described below.\n  \n\n  \n\n    \n\n      \nKey\n\n      \nValue\n\n      \nDescription\n\n    \n\n\n    \n\n      \n\n        \nBin Boundary XX\n\n        \nunsigned 16-bit integer\n\n        \nBin boundaries 0-14 are ADC values representing the bin boundary\n\n      \n\n      \n\n        \nBPV XX\n\n        \nFloat\n\n        \nBin Particle Volumes 0-15\n\n      \n\n      \n\n        \nBPD XX\n\n        \nFloat\n\n        \nBin Particle Densities 0-15\n\n      \n\n      \n\n        \nBSVW XX\n\n        \nFloat\n\n        \nBin Sample Volume Weightings 0-15\n\n      \n\n      \n\n        \nGSC\n\n        \nFloat\n\n        \nGain Scaling Coefficient\n\n      \n\n      \n\n        \nSFR\n\n        \nFloat\n\n        \nSample Flow Rate in ml/s\n\n      \n\n      \n\n        \nLaserDAC\n\n        \n8 bit integer\n\n        \nLaser power as an 8-bit integer (0-255)\n\n      \n\n      \n\n        \nFanDAC\n\n        \n8 bit integer\n\n        \nFan speed as an 8-bit integer (0-255)\n\n      \n\n    \n\n  \n\n\n\n\n\n\n  \nwrite_config_variables()\n\n  \n\n    This method is currently not implemented as of v0.1x\n  \n\n\n\n\n\n\n  \nread_histogram()\n\n  \n\n    Returns a dictionary containing the histogram as described in Alphasense' documentation.\n  \n\n  \n\n    \n\n      \nKey\n\n      \nValue\n\n      \nDescription\n\n    \n\n\n    \n\n      \n\n        \nBin XX\n\n        \nunsigned 16-bit integer\n\n        \nBins 0-15 are integers representing the histogram count for a given bin.\n\n      \n\n      \n\n        \nBin1 MToF\n\n        \nFloat\n\n        \nReturns the average amount of time that particles in Bin 1 took to cross the path of the OPC in microseconds\n\n      \n\n      \n\n        \nBin3 MToF\n\n        \nFloat\n\n        \nReturns the average amount of time that particles in Bin 3 took to cross the path of the OPC in microseconds\n\n      \n\n      \n\n        \nBin5 MToF\n\n        \nFloat\n\n        \nReturns the average amount of time that particles in Bin 5 took to cross the path of the OPC in microseconds\n\n      \n\n      \n\n        \nBin7 MToF\n\n        \nFloat\n\n        \nReturns the average amount of time that particles in Bin 7 took to cross the path of the OPC in microseconds\n\n      \n\n      \n\n        \nTemperature\n\n        \nFloat\n\n        \nReturns the temperature in degrees celcius\n\n      \n\n      \n\n        \nPressure\n\n        \n8 bit integer\n\n        \nReturns the pressure in Pascals\n\n      \n\n      \n\n        \nSampling Period\n\n        \n8 bit integer\n\n        \nReturns the actual sampling period in seconds.\n\n      \n\n      \n\n        \nChecksum\n\n        \n16 bit unsigned integer\n\n        \nReturns the total sum of histogram counts across all bins.\n\n      \n\n      \n\n        \nPM1\n\n        \nFloat\n\n        \nReturns the PM1 value in micrograms/m3\n\n      \n\n      \n\n        \nPM2.5\n\n        \nFloat\n\n        \nReturns the PM2.5 value in micrograms/m3\n\n      \n\n      \n\n        \nPM10\n\n        \nFloat\n\n        \nReturns the PM10 value in micrograms/m3\n\n      \n\n    \n\n  \n\n\n\n\n\n\n  \nsave_config_variables()\n\n  \n\n    Saves the config variables to non-volatile memory.\n  \n\n\n\n\n\n\n  \nenter_bootloader_mode()\n\n  \n\n    Enter bootloader mode.\n  \n\n\n\n\n\n\n  \nset_fan_power(fan_value)\n\n  \n\n    Set the fan power as an 8-bit unsigned integer. If the value is out of range (>255), a ValueError is raised.\n  \n\n\n\n\n\n\n  \nset_laser_power(laser_value)\n\n  \n\n    Set the laser power as an 8-bit unsigned integer. If the value is out of range (>255), a ValueError is raised.\n  \n\n\n\n\n\n\n  \nlaser_on()\n\n  \n\n    Returns True if the laser is successfully turned ON.\n  \n\n\n\n\n\n\n  \nlaser_off()\n\n  \n\n    Returns True if the laser is successfully turned OFF.\n  \n\n\n\n\n\n\n  \nfan_on()\n\n  \n\n    Returns True if the fan is successfully turned ON.\n  \n\n\n\n\n\n\n  \nfan_off()\n\n  \n\n    Returns True if the fan is successfully turned OFF.\n  \n\n\n\n\n\nExceptions\n\n\nThere are two custom exceptions that can be raised from within the opc library.\n\n\nSPIError\n\n\nThe SpiError is raised upon OPCN2 initialization if the spi connection is not valid.\n\n\nFirmwareError\n\n\nThe FirmwareError is raised if the firmware version is either not valid or not supported.", 
            "title": "API"
        }, 
        {
            "location": "/api/#opcn2", 
            "text": "class   opc.OPCN2(spi_connection, debug = False)  The  OPCN2  class takes the  spidev.SpiDev  instance as a required argument, with the option to also set  debug  mode. If there is an issue with the spidev connection, an  opc.SPIError   will be raised. If the firmware cannot be determined, an  opc.FirmwareError  will be raised.  Attributes  \n   cnxn \n   \n    cnxn is an instance of  spidev.SpiDev .\n     \n   debug \n   \n    debug is a  boolean .\n   \n   \n    if True, some useful information is printed out!\n     \n   firmware \n   \n    firmware is an  integer .\n   \n   \n    Firmware version of the Alphasense OPC-N2.\n     \n   on() \n   \n    Returns  True  if the fan and laser are successfully turned ON.\n     \n   off() \n   \n  Returns  True  if the fan and laser are successfully turned OFF.\n     \n   ping() \n   \n    Returns  True  if the  check_status  command is executed correctly.\n     \n   read_info_string() \n   \n    Returns a  string  containing the OPC Firmware version. This method also sets the firmware version attribute; if the firmware version is not supported, a  FirmwareError  is raised.\n     \n   read_config_variables() \n   \n    Returns a dictionary containing all configuration variables as described below.\n   \n   \n     \n       Key \n       Value \n       Description \n     \n\n     \n       \n         Bin Boundary XX \n         unsigned 16-bit integer \n         Bin boundaries 0-14 are ADC values representing the bin boundary \n       \n       \n         BPV XX \n         Float \n         Bin Particle Volumes 0-15 \n       \n       \n         BPD XX \n         Float \n         Bin Particle Densities 0-15 \n       \n       \n         BSVW XX \n         Float \n         Bin Sample Volume Weightings 0-15 \n       \n       \n         GSC \n         Float \n         Gain Scaling Coefficient \n       \n       \n         SFR \n         Float \n         Sample Flow Rate in ml/s \n       \n       \n         LaserDAC \n         8 bit integer \n         Laser power as an 8-bit integer (0-255) \n       \n       \n         FanDAC \n         8 bit integer \n         Fan speed as an 8-bit integer (0-255) \n       \n     \n     \n   write_config_variables() \n   \n    This method is currently not implemented as of v0.1x\n     \n   read_histogram() \n   \n    Returns a dictionary containing the histogram as described in Alphasense' documentation.\n   \n   \n     \n       Key \n       Value \n       Description \n     \n\n     \n       \n         Bin XX \n         unsigned 16-bit integer \n         Bins 0-15 are integers representing the histogram count for a given bin. \n       \n       \n         Bin1 MToF \n         Float \n         Returns the average amount of time that particles in Bin 1 took to cross the path of the OPC in microseconds \n       \n       \n         Bin3 MToF \n         Float \n         Returns the average amount of time that particles in Bin 3 took to cross the path of the OPC in microseconds \n       \n       \n         Bin5 MToF \n         Float \n         Returns the average amount of time that particles in Bin 5 took to cross the path of the OPC in microseconds \n       \n       \n         Bin7 MToF \n         Float \n         Returns the average amount of time that particles in Bin 7 took to cross the path of the OPC in microseconds \n       \n       \n         Temperature \n         Float \n         Returns the temperature in degrees celcius \n       \n       \n         Pressure \n         8 bit integer \n         Returns the pressure in Pascals \n       \n       \n         Sampling Period \n         8 bit integer \n         Returns the actual sampling period in seconds. \n       \n       \n         Checksum \n         16 bit unsigned integer \n         Returns the total sum of histogram counts across all bins. \n       \n       \n         PM1 \n         Float \n         Returns the PM1 value in micrograms/m3 \n       \n       \n         PM2.5 \n         Float \n         Returns the PM2.5 value in micrograms/m3 \n       \n       \n         PM10 \n         Float \n         Returns the PM10 value in micrograms/m3 \n       \n     \n     \n   save_config_variables() \n   \n    Saves the config variables to non-volatile memory.\n     \n   enter_bootloader_mode() \n   \n    Enter bootloader mode.\n     \n   set_fan_power(fan_value) \n   \n    Set the fan power as an 8-bit unsigned integer. If the value is out of range (>255), a ValueError is raised.\n     \n   set_laser_power(laser_value) \n   \n    Set the laser power as an 8-bit unsigned integer. If the value is out of range (>255), a ValueError is raised.\n     \n   laser_on() \n   \n    Returns True if the laser is successfully turned ON.\n     \n   laser_off() \n   \n    Returns True if the laser is successfully turned OFF.\n     \n   fan_on() \n   \n    Returns True if the fan is successfully turned ON.\n     \n   fan_off() \n   \n    Returns True if the fan is successfully turned OFF.", 
            "title": "OPCN2"
        }, 
        {
            "location": "/api/#exceptions", 
            "text": "There are two custom exceptions that can be raised from within the opc library.  SPIError  The SpiError is raised upon OPCN2 initialization if the spi connection is not valid.  FirmwareError  The FirmwareError is raised if the firmware version is either not valid or not supported.", 
            "title": "Exceptions"
        }
    ]
}